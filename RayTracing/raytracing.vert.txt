#version 430


uniform float aspect;

uniform vec3 campos;


in vec3 vPosition;



out vec3 origin, direction;




uniform mat4 projMat;
uniform mat4 viewMat;

mat4 invViewProjMat = inverse(viewMat * projMat);

vec4 ray00 = normalize(vec4(-1,-1, 0, 1)* invViewProjMat) - vec4(campos, 0);
vec4 ray10 = normalize(vec4(1, -1, 0, 1) * invViewProjMat) - vec4(campos, 0);
vec4 ray11 = normalize(vec4(1, 1, 0, 1) * invViewProjMat) - vec4(campos, 0);
vec4 ray01 = normalize(vec4(-1, 1, 0, 1) * invViewProjMat) - vec4(campos, 0);



//vec4 ray00 = vec4(-1,-1, 0, 1) * invViewProjMat;




void main()

{
	

	
//ray00 = normalize(ray00) - vec4(campos, 0);

gl_Position = vec4(vPosition, 1.0);

	//direction = normalize(vec3(vPosition.x*aspect, vPosition.y, -1.0f));

	//direction = campos * -1.0f;

	//direction = normalize(vec3(vPosition.x*aspect, vPosition.y, -1.0f));

	vec4 mix1 = mix(ray00, ray01, vPosition.y);
	vec4 mix2 = mix(ray10, ray11, vPosition.y);


	

	direction = vec3(mix(mix1, mix2, vPosition.x));	
	origin = campos;



}